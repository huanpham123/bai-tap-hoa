import os
import logging
import requests
from flask import Flask, jsonify, render_template
from apscheduler.schedulers.background import BackgroundScheduler

app = Flask(__name__, template_folder="templates")

# URL STT c·∫ßn gi·ªØ ·∫•m
STT_PING_URL = "https://stt-mu.vercel.app/api/ping"
PING_INTERVAL_MINUTES = 2  # ping m·ªói 2 ph√∫t

# C·∫•u h√¨nh logger
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("keepalive_app")


def ping_stt_server():
    """
    G·ª≠i GET ƒë·∫øn STT_PING_URL. N·∫øu th√†nh c√¥ng (HTTP 200), log OK;
    n·∫øu kh√¥ng, log c·∫£nh b√°o ho·∫∑c l·ªói t∆∞∆°ng ·ª©ng.
    """
    try:
        logger.info(f"‚ñ∂ G·ª≠i ping t·ªõi STT server: {STT_PING_URL}")
        resp = requests.get(STT_PING_URL, timeout=15)
        status = resp.status_code

        if status == 200:
            logger.info("‚úÖ STT server ƒëang ho·∫°t ƒë·ªông (HTTP 200).")
        else:
            logger.warning(f"‚ö†Ô∏è Ping tr·∫£ v·ªÅ HTTP {status}. Response (c·∫Øt): {resp.text[:100]}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ping STT server: {e}")


@app.route("/")
def index():
    """
    Tr·∫£ v·ªÅ trang HTML (index.html). Trang n√†y ch·ªâ ƒë·ªÉ ki·ªÉm tra r·∫±ng 
    Flask instance ƒëang ch·∫°y, kh√¥ng b·∫Øt bu·ªôc ph·∫£i m·ªü ƒë·ªÉ cron ho·∫°t ƒë·ªông.
    """
    return render_template("bt.html")


@app.route("/keepalive", methods=["GET"])
def keepalive():
    """
    Khi ƒë∆∞·ª£c g·ªçi (qua Cron ho·∫∑c th·ªß c√¥ng), h√†m n√†y c≈©ng g·ª≠i ping ngay l·∫≠p t·ª©c
    ƒë·∫øn STT_PING_URL v√† tr·∫£ JSON k·∫øt qu·∫£ ƒë·ªÉ d·ªÖ debug.
    """
    try:
        logger.info(f"‚ñ∂ (Manual) Ping STT server: {STT_PING_URL}")
        resp = requests.get(STT_PING_URL, timeout=15)
        status = resp.status_code

        if status == 200:
            return jsonify({"ok": True, "status_code": 200, "message": "STT server is awake"}), 200
        else:
            return jsonify({
                "ok": False,
                "status_code": status,
                "message": f"Ping returned HTTP {status}"
            }), 502

    except Exception as e:
        logger.error(f"‚ùå (Manual) L·ªói khi ping STT server: {e}")
        return jsonify({"ok": False, "status_code": -1, "message": f"Exception: {e}"}), 500


def start_scheduler():
    """
    Kh·ªüi BackgroundScheduler ƒë·ªÉ t·ª± ƒë·ªông g·ªçi ping_stt_server() m·ªói 2 ph√∫t.
    """
    scheduler = BackgroundScheduler(daemon=True)
    # next_run_time=None ƒë·ªÉ ch·∫°y l·∫ßn ƒë·∫ßu ngay l·∫≠p t·ª©c khi container kh·ªüi
    scheduler.add_job(ping_stt_server, "interval", minutes=PING_INTERVAL_MINUTES, next_run_time=None)
    scheduler.start()
    logger.info(f"‚úÖ Scheduler ƒë√£ kh·ªüi, ping m·ªói {PING_INTERVAL_MINUTES} ph√∫t.")


if __name__ == "__main__":
    # Tr∆∞·ªõc h·∫øt kh·ªüi scheduler
    logger.info("Kh·ªüi t·∫°o scheduler ƒë·ªÉ t·ª± ƒë·ªông ping STT server...")
    start_scheduler()

    port = int(os.environ.get("PORT", 5000))
    logger.info(f"üöÄ Keep-Alive Flask server ch·∫°y t·∫°i 0.0.0.0:{port}")
    # threaded=False ƒë·ªÉ APScheduler kh√¥ng b·ªã s·ª± c·ªë
    app.run(host="0.0.0.0", port=port, threaded=False)
